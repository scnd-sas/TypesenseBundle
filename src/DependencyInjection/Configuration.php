<?php

declare(strict_types=1);

namespace ACSEO\TypesenseBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('acseo_typesense');

        $treeBuilder->getRootNode()
            ->children()
                ->arrayNode('typesense')
                    ->info('Typesense server information')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('url')->isRequired()->cannotBeEmpty()->end()
                        ->scalarNode('key')->isRequired()->cannotBeEmpty()->end()
                        ->scalarNode('collection_prefix')->end()
                    ->end()
                ->end()
                ->arrayNode('collections')
                    ->info('Collection definition')
                    ->useAttributeAsKey('name')
                    ->arrayPrototype()
                        ->children()
                            ->scalarNode('collection_name')->end()
                            ->booleanNode('enable_nested_fields')->end()
                            ->scalarNode('entity')->end()
                            ->arrayNode('fields')
                                ->arrayPrototype()
                                    ->children()
                                        ->scalarNode('entity_attribute')->end()
                                        ->scalarNode('entity_attribute_type')->end()
                                        ->scalarNode('name')
                                            ->isRequired()
                                            ->info('Name of the field')
                                        ->end()
                                        ->scalarNode('type')
                                            ->isRequired()
                                            ->info('The data type of the field')
                                        ->end()
                                        ->booleanNode('facet')
                                            ->info('Enables faceting on the field. Default false')
                                        ->end()
                                        ->booleanNode('optional')
                                            ->info('When set to true, the field can have empty, null or missing values. Default false')
                                        ->end()
                                        ->booleanNode('index')
                                            ->info('When set to false, the field will not be indexed in any in-memory index (e.g. search/sort/filter/facet). Default true')
                                        ->end()
                                        ->booleanNode('store')
                                            ->info('When set to false, the field value will not be stored on disk. Default true')
                                        ->end()
                                        ->booleanNode('sort')
                                            ->info('When set to true, the field will be sortable. Default: true for numbers, false otherwise')
                                        ->end()
                                        ->booleanNode('infix')
                                            ->info('When set to true, the field value can be infix-searched. Incurs significant memory overhead. Default false')
                                        ->end()
                                        ->scalarNode('locale')
                                            ->info('For configuring language specific tokenization, e.g. jp for Japanese. Default: en which also broadly supports most European languages')
                                        ->end()
                                        ->integerNode('num_dim')
                                            ->info('Set this to a non-zero value to treat a field of type float[] as a vector field')
                                        ->end()
                                        ->scalarNode('vec_dist')
                                            ->info('The distance metric to be used for vector search. Default: cosine. You can also use ip for inner product')
                                        ->end()
                                        ->scalarNode('reference')
                                            ->info('Name of a field in another collection that should be linked to this collection so that it can be joined during query')
                                        ->end()
                                        ->booleanNode('range_index')
                                            ->info('Enables an index optimized for range filtering on numerical fields (e.g. rating:>3.5). Default: false')
                                        ->end()
                                        ->booleanNode('stem')
                                            ->info('Values are stemmed before indexing in-memory. Default: false')
                                        ->end()
                                        ->arrayNode('embed')
                                            ->children()
                                                ->arrayNode('from')
                                                    ->scalarPrototype()->end()
                                                ->end()
                                                ->variableNode('model_config')->end()
                                            ->end()
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                            ->scalarNode('default_sorting_field')->isRequired()->cannotBeEmpty()->end()
                            ->arrayNode('finders')
                                ->info('Entity specific finders declaration')
                                ->useAttributeAsKey('name')
                                ->arrayPrototype()
                                    ->children()
                                        ->scalarNode('finder_service')->end()
                                        ->arrayNode('finder_parameters')
                                            ->scalarPrototype()->end()
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                            ->arrayNode('token_separators')
                                ->defaultValue([])
                                ->scalarPrototype()->end()
                            ->end()
                            ->arrayNode('symbols_to_index')
                                ->defaultValue([])
                                ->scalarPrototype()->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}
